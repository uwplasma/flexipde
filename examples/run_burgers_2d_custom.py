"""Two‑dimensional Burgers equation demonstration.

This example shows how to define and solve a custom PDE model
outside of the core flexipde library.  We implement a scalar
Burgers equation in two dimensions using the base classes provided
by flexipde.  The equation solved is

.. math::

    \partial_t u + u \frac{\partial u}{\partial x} + u \frac{\partial u}{\partial y}
    = \nu\nabla^2 u,

where ``u`` is a scalar field and ``\nu`` is an optional viscosity
coefficient.  Periodic boundary conditions are applied in both
directions.  A sinusoidal initial condition is specified via the
common ``ic_params`` dictionary.  The example demonstrates how a
user can leverage flexipde’s utilities—grid generation,
discretisation, solver and plotting—without modifying the core
library.

Run this script with::

    python examples/run_burgers_2d_custom.py

"""

from __future__ import annotations

import numpy as np
import matplotlib.pyplot as plt
from typing import Dict, Any

from flexipde.grid import Grid
from flexipde.discretisation import FiniteDifference
from flexipde.models.base import PDEModel, FieldBC
from flexipde.solver import Simulation


class Burgers2D(PDEModel):
    """A user‑defined scalar Burgers equation in 2D.

    The equation solved is ``∂_t u + u∂_x u + u∂_y u = ν∇²u``, where
    ``ν`` is a viscosity parameter.  Periodic boundary conditions are
    used on the unit square.  The initial condition is generated by
    :meth:`flexipde.models.base.PDEModel._generate_initial_field`.
    """

    viscosity: float = 0.0

    def __post_init__(self) -> None:
        # Set periodic boundary conditions on the scalar field
        self.field_bcs = {"u": FieldBC("periodic")}

    def initial_state(self, ic_params: Dict[str, Any] | None = None) -> Dict[str, Any]:
        # Use helper to construct a scalar field; default to a sinusoid if not specified
        params = ic_params if ic_params is not None else {}
        field = self._generate_initial_field(params, default_type="sinusoidal")
        return {"u": field}

    def rhs(self, state: Dict[str, Any], t: Any) -> Dict[str, Any]:
        u = state["u"]
        du_dt = None
        # Convective (nonlinear) term: u * grad(u) summed over axes
        for axis in range(self.grid.dim):
            grad_u = self.diff.grad(u, axis)
            term = -u * grad_u
            du_dt = term if du_dt is None else du_dt + term
        # Add viscous diffusion term if viscosity > 0
        if self.viscosity != 0.0:
            du_dt = du_dt + self.viscosity * self.diff.laplacian(u)
        return {"u": du_dt}


def main() -> None:
    # Create a periodic 2D grid [0,1]×[0,1] with 64×64 points
    grid = Grid.regular([(0.0, 1.0), (0.0, 1.0)], [64, 64], periodic=[True, True])
    # Use finite differences on the NumPy backend
    diff = FiniteDifference(grid, backend="numpy")
    # Instantiate the custom Burgers model with small viscosity
    model = Burgers2D(grid, diff)
    model.viscosity = 0.01
    # Define a sinusoidal initial condition via ic_params; amplitude and wavevector
    ic_params = {
        "type": "sinusoidal",
        "amplitude": 1.0,
        "wavevector": [2, 2],
        "phase": 0.0,
    }
    # Set up simulation using explicit Euler with a stable time step
    sim = Simulation(model, t0=0.0, t1=0.05, dt0=0.0005, save_every=20)
    sim.initial_state_params_list = [ic_params]
    times, states = sim.run()
    # Extract initial and final states
    u0 = states[0]["u"]
    uf = states[-1]["u"]
    print(
        f"Completed 2D Burgers: t = {times[-1]:.3f}, min u = {uf.min():.4f}, max u = {uf.max():.4f}",
    )
    # Plot initial and final states
    fig, (ax0, ax1) = plt.subplots(1, 2, figsize=(10, 4))
    im0 = ax0.imshow(u0, extent=(0, 1, 0, 1), origin="lower")
    ax0.set_title("Initial")
    fig.colorbar(im0, ax=ax0)
    im1 = ax1.imshow(uf, extent=(0, 1, 0, 1), origin="lower")
    ax1.set_title("Final")
    fig.colorbar(im1, ax=ax1)
    fig.suptitle("2D Burgers Equation (custom model)")
    plt.tight_layout()
    plt.show()


if __name__ == "__main__":
    main()